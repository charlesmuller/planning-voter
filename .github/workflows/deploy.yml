name: Deploy to VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Permite execução manual do workflow

env:
  DOCKER_COMPOSE_VERSION: v2.20.2

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure Docker and Docker Compose
        run: |
          # Instala dependências essenciais
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common

          # Instala Docker via get.docker.com
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh

          # Instala versão específica do Docker Compose
          sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Create environment files
        env:
          BASE_URL: https://planningvoter.kinghost.net
          API_PORT: 80
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          HEALTH_CHECK_KEY: ${{ secrets.HEALTH_CHECK_KEY }}
        run: |
          # Server environment file
          echo "Criando arquivo .env.production do servidor..."
          {
            echo "# Configurações do Banco de Dados"
            echo "DB_HOST=$DB_HOST"
            echo "DB_USER=$DB_USER"
            echo "DB_PASSWORD=$DB_PASSWORD"
            echo "DB_NAME=$DB_NAME"
            echo ""
            echo "# Configurações da Aplicação"
            echo "CLIENT_URL=$BASE_URL"
            echo "API_PORT=$API_PORT"
            echo "NODE_ENV=production"
            echo "COOKIE_DOMAIN=planningvoter.kinghost.net"
            echo ""
            echo "# Configuração de Health Check"
            echo "HEALTH_CHECK_KEY=$HEALTH_CHECK_KEY"
          } > server/.env.production

          # Client environment file
          echo "Criando arquivo .env.production do cliente..."
          {
            echo "# URLs da API e WebSocket"
            echo "REACT_APP_API_URL=$BASE_URL/api"
            echo "REACT_APP_SOCKET_URL=$BASE_URL"
            echo "REACT_APP_URL_LOCAL=$BASE_URL"
            echo ""
            echo "# Ambiente"
            echo "NODE_ENV=production"
          } > client/.env.production

          # Verificar se os arquivos foram criados
          echo "Verificando se os arquivos foram criados:"
          ls -l server/.env.production client/.env.production

          # Verificar se os arquivos foram criados corretamente
          echo "Verificando conteúdo dos arquivos (sem senhas)..."
          echo "=== server/.env.production ==="
          grep -v "PASSWORD\|USER\|HOST" server/.env.production || true
          echo "=== client/.env.production ==="
          cat client/.env.production

      - name: Build and Test Docker Images
        env:
          HEALTH_CHECK_KEY: ${{ secrets.HEALTH_CHECK_KEY }}
        run: |
          # Construir imagens
          docker-compose -f docker-compose.prod.yml build

          # Validar composição do docker-compose
          docker-compose -f docker-compose.prod.yml config

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/deploy_key
          
          # Test SSH connection
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} echo "SSH connection successful"

      - name: Copy files to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          source: "., !node_modules, !*/node_modules"
          target: "/planning-voter"
          strip_components: 0
          debug: true

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          debug: true
          script: |
            # Navega para o diretório do projeto
            cd /planning-voter

            # Verifica os arquivos .env.production
            if [ ! -f server/.env.production ]; then
              echo "Arquivo server/.env.production não encontrado"
              exit 1
            fi
            
            if [ ! -f client/.env.production ]; then
              echo "Arquivo client/.env.production não encontrado"
              exit 1
            fi

            # Para os containers atuais
            docker-compose -f docker-compose.prod.yml down

            # Limpa recursos não utilizados
            docker system prune -af --volumes

            # Constrói e inicia os novos containers com logs
            docker-compose -f docker-compose.prod.yml up -d --build

            # Espera 30 segundos para os containers iniciarem
            echo "Aguardando containers iniciarem..."
            sleep 30

            # Verifica logs dos containers
            docker-compose -f docker-compose.prod.yml logs

            # Lista todos os containers
            docker ps -a

      - name: Verify Deployment
        uses: appleboy/ssh-action@v0.1.4
        env:
          HEALTH_CHECK_KEY: ${{ secrets.HEALTH_CHECK_KEY }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          envs: HEALTH_CHECK_KEY
          script: |
            cd /planning-voter

            # Verifica status dos containers
            echo "Verificando status dos containers..."
            docker-compose -f docker-compose.prod.yml ps

            # Verifica logs dos containers
            echo "Verificando logs dos containers..."
            docker-compose -f docker-compose.prod.yml logs --tail=50

            # Verifica se os containers estão rodando
            if ! docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
              echo "Deployment failed - containers are not running"
              docker-compose -f docker-compose.prod.yml logs
              exit 1
            fi

            # Mostra as variáveis de ambiente do container (apenas para debug)
            echo "Verificando variáveis de ambiente do container..."
            docker-compose -f docker-compose.prod.yml exec -T server env | grep -v PASSWORD

            # Espera o servidor estar pronto
            echo "Verificando se o servidor está respondendo..."
            for i in {1..6}; do
              if curl -v -H "X-Health-Check-Key: $HEALTH_CHECK_KEY" http://localhost:4000/api/health; then
                echo "Servidor está respondendo!"
                exit 0
              fi
              echo "Tentativa $i - Servidor ainda não está respondendo..."
              sleep 10
            done

            echo "Servidor não respondeu após 60 segundos"
            exit 1
